[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://execarduino/') ]

[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_withMoC-.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProject.name/]_withMoC-'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : arduino::Instruction| aProject.eAllContents(arduino::Instruction))]
"clocks for Instruction [element.name/]" 
	system addClocks: #(start[element.name /] stop[element.name /] ).
[/for]
[for (element : arduino::Sketch| aProject.eAllContents(arduino::Sketch))]
"clocks for Sketch [element.name/]" 
	system addClocks: #(start[element.name /] stop[element.name /] ).
[/for]
[for (element : arduino::Control| aProject.eAllContents(arduino::Control))]
"clocks for Control [element.name/]" 
	system addClocks: #(doEvaluate[element.name /] evaluatedToTrue[element.name /] evaluatedToFalse[element.name /] ).
[/for]
[for (element : arduino::ArduinoCommunicationModule| aProject.eAllContents(arduino::ArduinoCommunicationModule))]
"clocks for ArduinoCommunicationModule [element.name/]" 
	system addClocks: #(send[element.name /] receive[element.name /] ).
[/for]
[for (element : arduino::Delay| aProject.eAllContents(arduino::Delay))]
"clocks for Delay [element.name/]" 
	system addClocks: #().
[/for]
[for (element : arduino::If| aProject.eAllContents(arduino::If))]
"clocks for If [element.name/]" 
	system addClocks: #().
"internal clocks for arduino::If [element.name/]" 
    system addInternalClocks: #(i_trueOrFalse[element.name /] i_lastInstructionfromthenOrElse[element.name /] ).
[/for]
[for (element : arduino::While| aProject.eAllContents(arduino::While))]
"clocks for While [element.name/]" 
	system addClocks: #().
"internal clocks for arduino::While [element.name/]" 
    system addInternalClocks: #(w_startOrEndLoop[element.name /] w_trueOrFalse[element.name /] ).
[/for]
[for (element : arduino::Repeat| aProject.eAllContents(arduino::Repeat))]
"clocks for Repeat [element.name/]" 
	system addClocks: #().
"internal clocks for arduino::Repeat [element.name/]" 
    system addInternalClocks: #(r_startOrEndLoop[element.name /] r_trueOrFalse[element.name /] ).
[/for]
[for (element : arduino::ModuleGet| aProject.eAllContents(arduino::ModuleGet))]
"clocks for ModuleGet [element.name/]" 
	system addClocks: #().
[/for]
[for (element : arduino::ModuleAssignment| aProject.eAllContents(arduino::ModuleAssignment))]
"clocks for ModuleAssignment [element.name/]" 
	system addClocks: #().
[/for]
[for (element : arduino::BluetoothTransceiver| aProject.eAllContents(arduino::BluetoothTransceiver))]
"clocks for BluetoothTransceiver [element.name/]" 
	system addClocks: #().
[/for]
[for (element : arduino::VariableAssignment| aProject.eAllContents(arduino::VariableAssignment))]
"clocks for VariableAssignment [element.name/]" 
	system addClocks: #().
[/for]

[for (element : arduino::Instruction| aProject.eAllContents(arduino::Instruction))]
"relations for Instruction [element.name/]" 
	"I_OrderEnforcement in Instruction [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(stop[element.name/]  start[element.oclAsType(arduino::Instruction).eContainer().oclAsType(ecore::EObject).instructions->at(OrderedSet(arduino::Instruction)).name/]).

	"I_atomicbutDelayAndControlAndModuleGet in Instruction [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(start[element.name/]  stop[element.name/]).

[/for]
[for (element : arduino::Sketch| aProject.eAllContents(arduino::Sketch))]
"relations for Sketch [element.name/]" 
	"S_nonReentrant in Sketch [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  stop[element.name/]).

	"S_startInternalFirst in Sketch [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(start[element.name/]  start[element.block.instructions->first().name/]).

	"S_stopInternalFirst in Sketch [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(stop[element.block.instructions->last().name/]  stop[element.name/]).

[/for]
[for (element : arduino::Control| aProject.eAllContents(arduino::Control))]
"relations for Control [element.name/]" 
[/for]
[for (element : arduino::ArduinoCommunicationModule| aProject.eAllContents(arduino::ArduinoCommunicationModule))]
"relations for ArduinoCommunicationModule [element.name/]" 
[/for]
[for (element : arduino::Delay| aProject.eAllContents(arduino::Delay))]
"relations for Delay [element.name/]" 
	"D_NonAtomic in Delay [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  stop[element.name/]).

[/for]
[for (element : arduino::If| aProject.eAllContents(arduino::If))]
"expressions used by  If [element.name/]" 
	system allUnion: #(evaluatedToFalse[element.name/] evaluatedToTrue[element.name/]) named: #i_trueOrFalse[element.name/]. 
	system allUnion: #(stop[element.block.instructions->last().name/] stop[element.elseBlock.instructions->last().name/]) named: #i_lastInstructionfromthenOrElse[element.name/]. 
"relations for If [element.name/]" 
	"I_nonReentrant in If [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  stop[element.name/]).

	"I_startMeansEvaluate in If [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(start[element.name/]  doEvaluate[element.name/]).

	"I_evaluatingResultsInTrueOrFalse in If [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(doEvaluate[element.name/]  i_trueOrFalse[element.name/]).

	"I_trueExclusifFalse in If [element.name/]"
		system library: #Kernel relation: #Exclusion clocks: #(evaluatedToFalse[element.name/]  evaluatedToTrue[element.name/]).

	"I_startInternalofThen in If [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(evaluatedToTrue[element.name/]  start[element.block.instructions->first().name/]).

	"I_startInternalofElse in If [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(evaluatedToFalse[element.name/]  start[element.elseBlock.instructions->first().name/]).

	"I_stopInternalFirst in If [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(i_lastInstructionfromthenOrElse[element.name/]  stop[element.name/]).

[/for]
[for (element : arduino::While| aProject.eAllContents(arduino::While))]
"expressions used by  While [element.name/]" 
	system allUnion: #(start[element.name/] stop[element.block.instructions->last().name/]) named: #w_startOrEndLoop[element.name/]. 
	system allUnion: #(evaluatedToFalse[element.name/] evaluatedToTrue[element.name/]) named: #w_trueOrFalse[element.name/]. 
"relations for While [element.name/]" 
	"W_startOrFinishLoopMeansEvaluate in While [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(w_startOrEndLoop[element.name/]  doEvaluate[element.name/]).

	"W_evaluatingResultsInTrueOrFalse in While [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(doEvaluate[element.name/]  w_trueOrFalse[element.name/]).

	"W_trueExclusifFalse in While [element.name/]"
		system library: #Kernel relation: #Exclusion clocks: #(evaluatedToFalse[element.name/]  evaluatedToTrue[element.name/]).

	"W_startInternalFirst in While [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(evaluatedToTrue[element.name/]  start[element.block.instructions->first().name/]).

	"W_stopwhenEvaluatedFalse in While [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(evaluatedToFalse[element.name/]  stop[element.name/]).

[/for]
[for (element : arduino::Repeat| aProject.eAllContents(arduino::Repeat))]
"expressions used by  Repeat [element.name/]" 
	system allUnion: #(start[element.name/] stop[element.block.instructions->last().name/]) named: #r_startOrEndLoop[element.name/]. 
	system allUnion: #(evaluatedToFalse[element.name/] evaluatedToTrue[element.name/]) named: #r_trueOrFalse[element.name/]. 
"relations for Repeat [element.name/]" 
	"R_startMeansEvaluate in Repeat [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(r_startOrEndLoop[element.name/]  doEvaluate[element.name/]).

	"R_evaluatingResultsInTrueOrFalse in Repeat [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(doEvaluate[element.name/]  r_trueOrFalse[element.name/]).

	"R_trueExclusifFalse in Repeat [element.name/]"
		system library: #Kernel relation: #Exclusion clocks: #(evaluatedToFalse[element.name/]  evaluatedToTrue[element.name/]).

	"R_startInternalFirst in Repeat [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(evaluatedToTrue[element.name/]  start[element.block.instructions->first().name/]).

	"R_stopwhenEvaluatedFalse in Repeat [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(evaluatedToFalse[element.name/]  stop[element.name/]).

[/for]
[for (element : arduino::ModuleGet| aProject.eAllContents(arduino::ModuleGet))]
"relations for ModuleGet [element.name/]" 
	"waitIfInVariableAssignment in ModuleGet [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(receive[element.module.oclAsType(arduino::Module).name/]  start[element.module.oclAsType(arduino::Module).eContainer().oclAsType(ecore::EObject).name/]).

[/for]
[for (element : arduino::ModuleAssignment| aProject.eAllContents(arduino::ModuleAssignment))]
"relations for ModuleAssignment [element.name/]" 
	"sendAfterAssignement in ModuleAssignment [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  send[element.module.oclAsType(arduino::Module).name/]).

[/for]
[for (element : arduino::BluetoothTransceiver| aProject.eAllContents(arduino::BluetoothTransceiver))]
"relations for BluetoothTransceiver [element.name/]" 
	"sendBeforeReceive in BluetoothTransceiver [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

[/for]
[for (element : arduino::VariableAssignment| aProject.eAllContents(arduino::VariableAssignment))]
"relations for VariableAssignment [element.name/]" 
	"getDataIfModuleGetCom in VariableAssignment [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(receive[element.allInstances(arduino::VariableAssignment)->select(Set(OclInvalid) | (Set(OclInvalid)).oclAsType(OclInvalid).module.oclIsKindOf(BluetoothTransceiver))->asSequence()->first().oclAsType(OclInvalid).module.oclAsType(arduino::Module).name/]  start[element.name/]).

[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]
[/template]
